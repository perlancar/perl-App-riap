#!/usr/bin/perl

use 5.010001;
use strict;
use warnings;

# VERSION

use App::riap;

my $shell = App::riap->new;
$shell->cmdloop;

1;
# ABSTRACT: Riap client shell
# PODNAME: riap

=head1 SYNOPSIS

 % riap --help
 % riap [opts] [URI]

Sample invocations:

 # URI defaults to 'pl:/', which is the local Perl realm
 % riap

 # ditto, but specify initial "pwd"
 % riap /Calendar/Indonesia/Holiday/
 % riap pl:/Calendar/Indonesia/Holiday/

 # access remote API endpoints
 % riap https://cpanlists.org/api/
 % riap http://gudangapi.com/ga/

An example session:

 riap> pwd
 /

 riap> cd /spanel/api

 riap> ls
 pl:/spanel/api/account/
 pl:/spanel/api/disk_usage/
 pl:/spanel/api/mysql/
 pl:/spanel/api/pgsql/
 pl:/spanel/api/plan/
 ...

 riap> cd account/shared

 riap> ls -l
 pl:/spanel/api/account/shared/create_account     function
 pl:/spanel/api/account/shared/delete_accounts    function
 pl:/spanel/api/account/shared/list_accounts      function
 pl:/spanel/api/account/shared/suspend_account    function
 pl:/spanel/api/account/shared/unsuspend_account  function

 # execute a Riap function
 riap> list_accounts --nodisabled --nomigrated
 andi
 budi
 charlie
 devi
 steven

 riap> exit


=head1 DESCRIPTION

A command-line shell for L<Perinci::Access>. A convenient way to explore API
services which use the L<Riap> protocol, or Perl libraries which have L<Rinci>
metadata.

Example API services that you can test this with:

=over

=item * cpanlists.org at L<https://cpanlists.org/api/>

=item * gudangdata.org at L<https://gudangdata.org/gd/>

=item * gudangapi.com at L<https://gudangapi.com/ga/>

=item * Any server using the Spanel control panel software

The API daemon listens at the Unix socket at C</var/run/spanel/apid.sock> or at
C<https://localhost:1010>.

=back

Example Perl libraries you can test this with (you need to install them first):
L<Text::sprintfn>, L<Git::Bunch>, L<Calendar::Indonesia::Holiday>,
L<Perinci::Examples>.

With the shell, you can browse the packages and functions as if they were
directories and files (using commands like C<cd> and C<pwd>). You can execute
functions as if they were executables.


=head1 OPTIONS

=over

=item * --help

Show short help message.

=item * --user=S

Supply HTTP authentication user. You can also set this via environment
L<PERINCI_HTTP_USER> (see L<Perinci::Access> for more details).

=item * --password=S

Supply HTTP authentication password. You can also set this via environment
L<PERINCI_HTTP_PASSWORD> (see L<Perinci::Access> for more details).


=head1 COMMANDS

=head2 help

=head2 exit

=head2 pwd

=head2 cd

=head2 doc <URI>

=head2 list (or ls) [-l] [URI]

Perform C<list> request. If C<URI> is not specified, will list the current
"directory" (package entity).

Options:

=over

=item * -l

Add C<< detail => 1 >> to Riap request, which will request more details.

=back

=head2 info <URI>

Perform C<info> Riap request on an entity at C<URI>.

=head2 request <ACTION> <URI> <KEY=VAL> ...

Perform Riap request to a package entity at C<URI>. You can specify additional
request key(s). If you want to pass data structures like an array or hash, you
can specify C<< KEY:j=VAL >>.

Example:

 riap> call somefunc 'args:j={"name": "Steven Haryanto"}'


=head1 ENVIRONMENT

=over

=item * RIAP_HISTFILE (str, default: ~/.riap_history)

Like in shells, can be set to empty string to disable history loading/saving.

=back


=head1 FILES

C<~/.riap_history> - history


=head1 TODO

=over

=item * Configurable prompt

=item * Load configuration from file

Especially for HTTP authentication.

=item * RIAP_HISTSIZE

And also probably RIAP_HISTFILESIZE, RIAP_HISTIGNORE, RIAP_HISTTIMEFORMAT.

=item * Something like PATH? [#E]

=back

=cut
